package cn.mark.network.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.mark.network.db.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Username = new Property(0, String.class, "username", false, "USERNAME");
        public final static Property Nickname = new Property(1, String.class, "nickname", false, "NICKNAME");
        public final static Property Image = new Property(2, String.class, "image", false, "IMAGE");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property Token = new Property(4, String.class, "token", false, "TOKEN");
        public final static Property Email = new Property(5, String.class, "email", false, "EMAIL");
        public final static Property Taobao_phone = new Property(6, String.class, "taobao_phone", false, "TAOBAO_PHONE");
        public final static Property IsLogin = new Property(7, Boolean.class, "isLogin", false, "IS_LOGIN");
        public final static Property User_id = new Property(8, Integer.class, "user_id", false, "USER_ID");
        public final static Property Phone_verify = new Property(9, Integer.class, "phone_verify", false, "PHONE_VERIFY");
        public final static Property Taobao_phone_verify = new Property(10, Integer.class, "taobao_phone_verify", false, "TAOBAO_PHONE_VERIFY");
        public final static Property Id = new Property(11, Long.class, "id", true, "_id");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"USERNAME\" TEXT NOT NULL ," + // 0: username
                "\"NICKNAME\" TEXT," + // 1: nickname
                "\"IMAGE\" TEXT," + // 2: image
                "\"PHONE\" TEXT," + // 3: phone
                "\"TOKEN\" TEXT," + // 4: token
                "\"EMAIL\" TEXT," + // 5: email
                "\"TAOBAO_PHONE\" TEXT," + // 6: taobao_phone
                "\"IS_LOGIN\" INTEGER," + // 7: isLogin
                "\"USER_ID\" INTEGER," + // 8: user_id
                "\"PHONE_VERIFY\" INTEGER," + // 9: phone_verify
                "\"TAOBAO_PHONE_VERIFY\" INTEGER," + // 10: taobao_phone_verify
                "\"_id\" INTEGER PRIMARY KEY );"); // 11: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUsername());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, image);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(5, token);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
 
        String taobao_phone = entity.getTaobao_phone();
        if (taobao_phone != null) {
            stmt.bindString(7, taobao_phone);
        }
 
        Boolean isLogin = entity.getIsLogin();
        if (isLogin != null) {
            stmt.bindLong(8, isLogin ? 1L: 0L);
        }
 
        Integer user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(9, user_id);
        }
 
        Integer phone_verify = entity.getPhone_verify();
        if (phone_verify != null) {
            stmt.bindLong(10, phone_verify);
        }
 
        Integer taobao_phone_verify = entity.getTaobao_phone_verify();
        if (taobao_phone_verify != null) {
            stmt.bindLong(11, taobao_phone_verify);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(12, id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getString(offset + 0), // username
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // token
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // email
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // taobao_phone
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isLogin
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // user_id
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // phone_verify
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // taobao_phone_verify
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUsername(cursor.getString(offset + 0));
        entity.setNickname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setToken(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTaobao_phone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsLogin(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setUser_id(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setPhone_verify(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setTaobao_phone_verify(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
